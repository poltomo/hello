---
layout: post
title:  "n queens problem"
date:   2023-10-07 15:06:34 -0700
# categories:
# permalink:
---

This is my first post of October 2023.

Lately, I've been coming across lots of things that are worth writing about, especially since I'm in school now. It seems every lecture there is some new thing that I would like to look into more. Sure, there's always going to be interesting things to learn about, but I can't possibly write about all of that.

I think this has to do with me not being totally sure on the direction of poltomo. The goal is not to be comprehensive; like I said earlier, its just not possible. Its not about summarizing either. That's just lame. And, let's not forget that I am getting way ahead of myself. I've written maybe like 7 posts, and most are about competitive programming problems. So much for variety.

One idea I had is too bring in more people. And if they are smarter than me, then my own pace of learning would increase.

I read this article a while ago that said writing about things that have already been heavily discussed is redundant and pointless in the age of generative AI. I guess that makes sense, but what if people missed some key insight the first time around. This is a big question for me because a big worry of mine is that this is a waste of time.

Anyways, here's an editorial on a very old puzzle with tons of existing editorials. Enjoy!

---

[wikipedia](https://en.wikipedia.org/wiki/Eight_queens_puzzle)

[cses problem](https://cses.fi/problemset/task/1624/)

solution:

Since no queens can share a row, there will be one queen per row and one queen per column in a solution. This makes for 8! queen arrangements.

The intuition behind backtracking here is that when you place a queen, say in the first column of the first row, you threaten squares in following rows. So, in a trial and error fashion, you can successively place queens row by row until there is no unthreatened square to place the next queen. By that point if you have placed all your queens (the last queen you placed was on the last row), then you found a solution. If you still have queens yet to be placed, then you undo queen places, or backtrack, to a point where you can try a new arrangement.



solution 1:
{% highlight c++ %}
#include<iostream>
#include<array>


using namespace std;

#define REP(i,N) for (int i = 0;i < N;++i)
#define ll long long

const int N = 8;

void backtrack(int row, long long& cnt, array< array<int, N>, N>& A, const array<string, N>& board) {
	if (row == N) {
		++cnt;
		return;
	}

	REP(col, N) {
		if (board[row][col] == '.' && A[row][col] == 0) {

			for (int i = row + 1;i < N;++i) ++A[i][col];

			int h = col + 1;
			int v = row + 1;

			for (;h < N && v < N;++h,++v) ++A[v][h];

			h = col - 1;
			v = row + 1;

			for (;h >= 0 && v < N;--h,++v) ++A[v][h];


			backtrack(row + 1, cnt, A, board);


			for (int i = row + 1;i < N;++i) --A[i][col];

			h = col + 1;
			v = row + 1;

			for (;h < N && v < N;++h,++v) --A[v][h];

			h = col - 1;
			v = row + 1;

			for (;h >= 0 && v < N;--h,++v) --A[v][h];
		}
	}
}




int main() {
	array<string, N> board;

	REP(i, N) {
		cin >> board[i];
	}

	array< array<int, N>, N> A;

	REP(i, N) {
		REP(j, N) {
			A[i][j] = 0;
		}
	}

	stack<pair<int, int> > s;

	ll cnt = 0;

	backtrack(0, cnt, A, board);

	cout << cnt << endl;
}
{% endhighlight %}

You can also do this iteratively using a stack to perform the depth first search.

solution 2:
{% highlight c++ %}
#include<iostream>
#include<array>
#include<stack>


using namespace std;

#define REP(i,N) for (int i = 0;i < N;++i)
#define ll long long

const int N = 8;

int main() {
	array<string, N> board;

	REP(i, N) {
		cin >> board[i];
	}

	array< array<int, N>, N> A;

	REP(i, N) {
		REP(j, N) {
			A[i][j] = 0;
		}
	}

	stack<pair<int, int> > s;

	ll cnt = 0;

	REP(col, N) {
		if (board[0][col] == '.') s.push({0, col});
	}


	while (!s.empty()) {
		pair<int, int> p = s.top();

		if (A[p.first][p.second]) {
			--A[p.first][p.second];

			for (int i = p.first + 1;i < N;++i) --A[i][p.second];

			int v = p.first + 1;
			int h = p.second + 1;

			for (;h < N && v < N;++h,++v) --A[v][h];

			v = p.first + 1;
			h = p.second - 1;

			for (;h >= 0 && v < N;--h,++v) --A[v][h];

			s.pop();
			continue;
		}

		if (p.first == N - 1) {
			++cnt;

			s.pop();
			continue;
		}



		++A[p.first][p.second];

		for (int i = p.first + 1;i < N;++i) ++A[i][p.second];

		int v = p.first + 1;
		int h = p.second + 1;

		for (;h < N && v < N;++h,++v) ++A[v][h];

		v = p.first + 1;
		h = p.second - 1;

		for (;h >= 0 && v < N;--h,++v) ++A[v][h];

		REP(col, N) {
			if (board[p.first + 1][col] == '.' && A[p.first + 1][col] == 0) {
				s.push({p.first + 1, col});
			}
		}
	}

	cout << cnt << endl;
}

{% endhighlight %}


I think this problem is pretty neat. It came up in my data structures course. Professor Schindler had a lot to say about it. After class, he likened backtracking to some AI search techniques, but the point was lost on me since I was not paying attention. He also said something about rubix cubes.

[backtracking](https://en.wikipedia.org/wiki/Backtracking#Further_reading)

solution 3:
[usaco guide](https://usaco.guide/bronze/complete-rec?lang=cpp#backtracking)

The usaco guide details a better way to keep track of whether diagonals are threatened. I did not use this, but it is a better technique so check it out.
